{
  "hash": "abfaf226f8d805e2061442de8753c997",
  "result": {
    "markdown": "---\ntitle: \"Metal Subgenre Market Basket Analysis in R\"\nauthor: \"Kevin B. Miller\"\noutput: html_document\nbibliography: references.bib\ncsl: apa.csl\ndate: July 8, 2024\n---\n\n\n# TL;DR\n\nThe analyses in this report analyzed commonly co-occurring Metal subgenres in Metal bands using Market Basket Analysis techniques.\n\nBands were scraped from Encyclopaedia Metallum and assigned binary values to each basic subgenre from the website. Only bands that were classified as having multiple subgenres were examined here.\n\nDeath (52.7%), Thrash (30.7%), and Black Metal (27.6%) were the most common subgenres in multi-subgenre bands. More common subgenres tended to have a lower percentage of multi-subgenre bands (e.g., Black Metal: 37.0%; Heavy Metal: 39.9%), whereas less common subgenres tended to have a higher percentage of multi-subgenre bands (e.g., Experimental/Avant-garde Metal: 94.2%; Electronic/Industrial Metal: 90.6%). Among multi-subgenre bands, 89.9% of Grindcore bands were also categorized as Death Metal, 74.4% of Metalcore/Deathcore bands were also categorized as Death Metal, and 63.5% of Folk/Viking/Pagan Metal bands were also categorized as Black Metal. The subgenre pairings that occurred at least 1.5x more frequently than expected included Power and Heavy Metal, Gothic and Doom Metal, Folk/Viking/Pagan and Black Metal, Grindcore and Death Metal, and Speed and Thrash Metal.\n\nThese subgenres pairings represent commonly co-occurring Metal subgenres, and each pairing can be explained within the developmental context of Metal music. Further analyses can expand on those conducted here by examining more specific subgenres or including more contextual information regarding the band's use of a given subgenre.\n\n# Background\n\nMetal music is composed of subgenres, which represent common subtypes of Metal. Many bands evolve into different subgenres across releases, or will take influence from multiple subgenres at once. Since bands occupying multiple subgenres is not uncommon, I wanted to analyze metal band data to see which subgenres frequently occurred together. The implication for commonly co-occurring subgenres is that these subgenres \"blend\" well together, or are comprised of similar influences or musical components.\n\nI tested this using Market Basket Analysis (MBA), which is a technique frequently used in commercial settings to analyze item associations across transactions. For a good primer on the topic and metric interpretation, I recommend reading *Market Basket Analysis 101: Key Concepts* from @curriesivek2020. In my use case, subgenres were used in place of items and bands in place of transactions. These analyses used the `arules` package [@hahsler2023], and I followed along with the corresponding tutorial to apply these functions to my use case [@hahsler2024].\n\nThe data used in these analyses was scraped from [Encyclopaedia Metallum](https://www.metal-archives.com/) and processed within the `metallum_bands.db` SQLite database. Text strings from each band's original `Genre` entry were extracted to compared to a list of fifteen basic genres provided by the website (see `metallum_web_scraping.qmd` for more details). These Metal subgenres are included Black, Death, Doom/Stoner/Sludge, Electronic/Industrial, Experimental/Avant-garde, Folk/Viking/Pagan, Gothic, Grindcore, Groove, Heavy, Metalcore/Deathcore, Power, Progressive, Speed, Symphonic, and Thrash Metal. These analyses were meant to characterize associations between the broader, overarching subgenres, and further analyses can expand findings here by analyzing subgenres with greater specificity.\n\n## Load Packages and Data\n\nFollowing the loading of necessary packages and setting of options, the variable `con` was set to represent the connection to database `metallum_bands.db`. The data from this table was extracted into the tibble `te_metal_bands_df`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# load necessary packages\nlibrary(tidyverse) \nlibrary(RSQLite) \nlibrary(knitr) \nlibrary(ggplot2)  \nlibrary(arules)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# set global option to 3 digits to keep outputs from overflowing\noptions(digits=3)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# set con equal to SQLite database metallum_bands.db\ncon <- dbConnect(RSQLite::SQLite(), 'metallum_bands.db')\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code .code-overflow-wrap}\n# extract the table dc_processed genres as a tibble and get basic info \nte_metal_bands_df <- dbGetQuery(con, 'SELECT * FROM dc_processed_genres') %>%\n    as_tibble()\nstr(te_metal_bands_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ntibble [182,105 × 22] (S3: tbl_df/tbl/data.frame)\n $ band_id              : int [1:182105] 0 1 2 3 4 5 6 7 8 9 ...\n $ band_name            : chr [1:182105] \"A // Solution\" \"A 12 Gauge Tragedy\" \"A Balance of Power\" \"A Band Named Jon\" ...\n $ country              : chr [1:182105] \"United States\" \"United States\" \"United States\" \"United States\" ...\n $ genre                : chr [1:182105] \"Crust Punk/Thrash Metal\" \"Deathcore\" \"Melodic Death Metal/Metalcore\" \"Brutal Death Metal/Grindcore\" ...\n $ status               : chr [1:182105] \"Split-up\" \"Split-up\" \"Active\" \"Active\" ...\n $ black                : int [1:182105] 0 0 0 0 0 0 1 0 0 1 ...\n $ death                : int [1:182105] 0 1 1 1 1 0 0 1 1 0 ...\n $ doom                 : int [1:182105] 0 0 0 0 0 0 0 0 0 0 ...\n $ electronic_industrial: int [1:182105] 0 0 0 0 0 0 0 0 0 0 ...\n $ experimental         : int [1:182105] 0 0 0 0 0 0 0 0 0 0 ...\n $ folk                 : int [1:182105] 0 0 0 0 0 0 0 0 0 0 ...\n $ gothic               : int [1:182105] 0 0 0 0 0 0 0 0 0 0 ...\n $ grindcore            : int [1:182105] 0 0 0 1 0 0 0 0 0 0 ...\n $ groove               : int [1:182105] 0 0 0 0 0 0 0 0 1 0 ...\n $ heavy                : int [1:182105] 0 0 0 0 0 0 0 0 0 0 ...\n $ metalcore_deathcore  : int [1:182105] 0 1 1 0 0 0 0 1 1 0 ...\n $ power                : int [1:182105] 0 0 0 0 0 1 0 0 0 0 ...\n $ progressive          : int [1:182105] 0 0 0 0 0 1 0 0 0 0 ...\n $ speed                : int [1:182105] 0 0 0 0 0 0 0 0 0 0 ...\n $ symphonic            : int [1:182105] 0 0 0 0 0 0 0 0 0 0 ...\n $ thrash               : int [1:182105] 1 0 0 0 1 0 0 0 0 0 ...\n $ total_subgenres      : int [1:182105] 1 2 2 2 2 2 1 2 3 1 ...\n```\n:::\n:::\n\n\n## Initial Data Wrangling and Transaction Setup\n\nColumns pertaining to subgenres were binary (0/1), denoting absence or presence of subgenre for each band, respectively. While the majority of bands belonged to one subgenre, a considerable amount had two or more. Following the removal of bands with fewer than two subgenres, nearly 70,000 multi-subgenre bands remained. The average number of subgenres for this subgroup was 2.15, indicating a smaller proportion of bands with three to six subgenres. The object `trans_bands` was used to convert the binary subgenre variables to logical (TRUE/FALSE) and store each band as a transaction with subgenres as items. The summary and plot depict the relative frequencies of each subgenre, with Death (36,395), Thrash (21,187), and Black Metal (19,060) as the most common subgenres.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# shorten the longer names for easier plotting and outputs\nlong_subs <- c(elect = 'electronic_industrial', \n               exp = 'experimental', \n               core = 'metalcore_deathcore', \n               prog = 'progressive')\nte_metal_bands_df <- te_metal_bands_df %>%\n    rename(all_of(long_subs))\nstr(te_metal_bands_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ntibble [182,105 × 22] (S3: tbl_df/tbl/data.frame)\n $ band_id        : int [1:182105] 0 1 2 3 4 5 6 7 8 9 ...\n $ band_name      : chr [1:182105] \"A // Solution\" \"A 12 Gauge Tragedy\" \"A Balance of Power\" \"A Band Named Jon\" ...\n $ country        : chr [1:182105] \"United States\" \"United States\" \"United States\" \"United States\" ...\n $ genre          : chr [1:182105] \"Crust Punk/Thrash Metal\" \"Deathcore\" \"Melodic Death Metal/Metalcore\" \"Brutal Death Metal/Grindcore\" ...\n $ status         : chr [1:182105] \"Split-up\" \"Split-up\" \"Active\" \"Active\" ...\n $ black          : int [1:182105] 0 0 0 0 0 0 1 0 0 1 ...\n $ death          : int [1:182105] 0 1 1 1 1 0 0 1 1 0 ...\n $ doom           : int [1:182105] 0 0 0 0 0 0 0 0 0 0 ...\n $ elect          : int [1:182105] 0 0 0 0 0 0 0 0 0 0 ...\n $ exp            : int [1:182105] 0 0 0 0 0 0 0 0 0 0 ...\n $ folk           : int [1:182105] 0 0 0 0 0 0 0 0 0 0 ...\n $ gothic         : int [1:182105] 0 0 0 0 0 0 0 0 0 0 ...\n $ grindcore      : int [1:182105] 0 0 0 1 0 0 0 0 0 0 ...\n $ groove         : int [1:182105] 0 0 0 0 0 0 0 0 1 0 ...\n $ heavy          : int [1:182105] 0 0 0 0 0 0 0 0 0 0 ...\n $ core           : int [1:182105] 0 1 1 0 0 0 0 1 1 0 ...\n $ power          : int [1:182105] 0 0 0 0 0 1 0 0 0 0 ...\n $ prog           : int [1:182105] 0 0 0 0 0 1 0 0 0 0 ...\n $ speed          : int [1:182105] 0 0 0 0 0 0 0 0 0 0 ...\n $ symphonic      : int [1:182105] 0 0 0 0 0 0 0 0 0 0 ...\n $ thrash         : int [1:182105] 1 0 0 0 1 0 0 0 0 0 ...\n $ total_subgenres: int [1:182105] 1 2 2 2 2 2 1 2 3 1 ...\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# get distribution for total_subgenres\nggplot(te_metal_bands_df, aes(x=total_subgenres)) +\n    geom_histogram(binwidth=1) +\n    labs(title='Number of Bands with Number of Subgenres',\n         x='Number of Subgenres', \n         y='Number of Bands')\n```\n\n::: {.cell-output-display}\n![](subgenre_pairings_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# remove bands with 0 or 1 subgenre\nref_te_metal_bands_df <- te_metal_bands_df %>%\n    filter(total_subgenres > 1)\nstr(ref_te_metal_bands_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ntibble [69,067 × 22] (S3: tbl_df/tbl/data.frame)\n $ band_id        : int [1:69067] 1 2 3 4 5 7 8 10 15 17 ...\n $ band_name      : chr [1:69067] \"A 12 Gauge Tragedy\" \"A Balance of Power\" \"A Band Named Jon\" \"A Band of Orcs\" ...\n $ country        : chr [1:69067] \"United States\" \"United States\" \"United States\" \"United States\" ...\n $ genre          : chr [1:69067] \"Deathcore\" \"Melodic Death Metal/Metalcore\" \"Brutal Death Metal/Grindcore\" \"Death/Thrash Metal\" ...\n $ status         : chr [1:69067] \"Split-up\" \"Active\" \"Active\" \"Active\" ...\n $ black          : int [1:69067] 0 0 0 0 0 0 0 0 0 0 ...\n $ death          : int [1:69067] 1 1 1 1 0 1 1 0 1 1 ...\n $ doom           : int [1:69067] 0 0 0 0 0 0 0 1 0 0 ...\n $ elect          : int [1:69067] 0 0 0 0 0 0 0 0 0 0 ...\n $ exp            : int [1:69067] 0 0 0 0 0 0 0 0 0 0 ...\n $ folk           : int [1:69067] 0 0 0 0 0 0 0 0 0 0 ...\n $ gothic         : int [1:69067] 0 0 0 0 0 0 0 0 0 0 ...\n $ grindcore      : int [1:69067] 0 0 1 0 0 0 0 0 0 0 ...\n $ groove         : int [1:69067] 0 0 0 0 0 0 1 0 0 1 ...\n $ heavy          : int [1:69067] 0 0 0 0 0 0 0 1 0 0 ...\n $ core           : int [1:69067] 1 1 0 0 0 1 1 0 1 0 ...\n $ power          : int [1:69067] 0 0 0 0 1 0 0 0 0 0 ...\n $ prog           : int [1:69067] 0 0 0 0 1 0 0 0 0 0 ...\n $ speed          : int [1:69067] 0 0 0 0 0 0 0 0 0 0 ...\n $ symphonic      : int [1:69067] 0 0 0 0 0 0 0 0 0 0 ...\n $ thrash         : int [1:69067] 0 0 0 1 0 0 0 0 0 0 ...\n $ total_subgenres: int [1:69067] 2 2 2 2 2 2 3 2 2 2 ...\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# get mean number of subgenres among those with multiple\nsubgenres_per_multi_bands <- mean(ref_te_metal_bands_df$total_subgenres)\nsubgenres_per_multi_bands\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2.15\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# setup transactions object from arules for subgenre columns\ntrans_bands <- ref_te_metal_bands_df %>%\n    select(black:thrash) %>% \n    # convert from binary to logical\n    mutate_all(as.logical) %>% \n    transactions()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# get basic summary\nsummary(trans_bands)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ntransactions as itemMatrix in sparse format with\n 69067 rows (elements/itemsets/transactions) and\n 16 columns (items) and a density of 0.134 \n\nmost frequent items:\n  death  thrash   black   heavy    doom (Other) \n  36395   21187   19060   10750   10205   50910 \n\nelement (itemset/transaction) length distribution:\nsizes\n    2     3     4     5     6 \n59353  9092   586    35     1 \n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   2.00    2.00    2.00    2.15    2.00    6.00 \n\nincludes extended item information - examples:\n  labels variables levels\n1  black     black   TRUE\n2  death     death   TRUE\n3   doom      doom   TRUE\n\nincludes extended transaction information - examples:\n  transactionID\n1             1\n2             2\n3             3\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# show plot of each subgenre's relative frequency\nitemFrequencyPlot(trans_bands, topN=20)\n```\n\n::: {.cell-output-display}\n![Metal Subgenres (left to right): Death, Thrash, Black, Heavy, Doom, Progressive, Groove, Power, Metalcore/Deathcore, Grindcore, Symphonic, Gothic, Speed, Folk/Viking/Pagan, Experimental/Avant-garde, Electronic/Industrial.](subgenre_pairings_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n## Support\n\nSupport represents the proportion of the records in a set of items containing an item or combination of items, as depicted in the equation below:\n\n$$\nSupport = \\frac{Count(A)}{Count(All)}\n$$\n\nThe threshold for support was set to 0.015, which is the proportion roughly equal to 1,000 bands in the multi-subgenre subset. The table for single subgenres reiterates the frequency plot from the previous section, with Death (52.7%), Thrash (30.7%), and Black Metal (27.6%) comprising a large proportion of the total bands. With a fairly liberal support threshold, 22 multi-subgenre combinations had 1,000 bands or more. Two immediate standouts included Death-Thrash and Blackened Death Metal, with both comprising roughly 14% of observations in the item set (14.1% and 14.0%, respectively).\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# create apriori rules object for occurrences with support > 0.015\nsupport_rules <- trans_bands %>%\n    apriori(parameter=list(target='frequent', support=0.015))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nApriori\n\nParameter specification:\n confidence minval smax arem  aval originalSupport maxtime support minlen\n         NA    0.1    1 none FALSE            TRUE       5   0.015      1\n maxlen            target  ext\n     10 frequent itemsets TRUE\n\nAlgorithmic control:\n filter tree heap memopt load sort verbose\n    0.1 TRUE TRUE  FALSE TRUE    2    TRUE\n\nAbsolute minimum support count: 1036 \n\nset item appearances ...[0 item(s)] done [0.00s].\nset transactions ...[16 item(s), 69067 transaction(s)] done [0.00s].\nsorting and recoding items ... [16 item(s)] done [0.00s].\ncreating transaction tree ... done [0.01s].\nchecking subsets of size 1 2 3 done [0.00s].\nsorting transactions ... done [0.01s].\nwriting ... [38 set(s)] done [0.00s].\ncreating S4 object  ... done [0.00s].\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# create subset for single subgenres\nsingle_item_support <- subset(support_rules, size(items) == 1)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# create subset for multiple subgenres\nmulti_item_support <- subset(support_rules, size(items) > 1)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# sort and display the single subgenre support metrics\nsingle_item_support_sorted <- sort(single_item_support, by='support') %>%\n    head(n=20) %>%\n    inspect()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     items       support count\n[1]  {death}     0.5270  36395\n[2]  {thrash}    0.3068  21187\n[3]  {black}     0.2760  19060\n[4]  {heavy}     0.1556  10750\n[5]  {doom}      0.1478  10205\n[6]  {prog}      0.1123   7759\n[7]  {groove}    0.1032   7127\n[8]  {power}     0.1019   7035\n[9]  {core}      0.0975   6735\n[10] {grindcore} 0.0922   6366\n[11] {symphonic} 0.0550   3797\n[12] {gothic}    0.0432   2983\n[13] {speed}     0.0419   2892\n[14] {folk}      0.0397   2745\n[15] {exp}       0.0287   1979\n[16] {elect}     0.0216   1492\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# sort and display the multiple subgenre support metrics\nmulti_item_support_sorted <- sort(multi_item_support, by='support') %>%\n    head(n=25) %>%\n    inspect()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     items              support count\n[1]  {death, thrash}    0.1414  9766 \n[2]  {black, death}     0.1397  9650 \n[3]  {death, grindcore} 0.0829  5724 \n[4]  {death, core}      0.0725  5009 \n[5]  {death, doom}      0.0597  4125 \n[6]  {heavy, thrash}    0.0502  3466 \n[7]  {heavy, power}     0.0477  3294 \n[8]  {groove, thrash}   0.0443  3060 \n[9]  {black, thrash}    0.0433  2991 \n[10] {death, prog}      0.0402  2774 \n[11] {black, doom}      0.0368  2540 \n[12] {death, groove}    0.0284  1959 \n[13] {black, folk}      0.0252  1743 \n[14] {black, symphonic} 0.0218  1507 \n[15] {power, prog}      0.0197  1360 \n[16] {speed, thrash}    0.0196  1357 \n[17] {heavy, prog}      0.0188  1297 \n[18] {power, thrash}    0.0177  1221 \n[19] {prog, thrash}     0.0167  1154 \n[20] {doom, gothic}     0.0165  1139 \n[21] {doom, heavy}      0.0161  1114 \n[22] {groove, core}     0.0158  1094 \n```\n:::\n:::\n\n\n## Mixability\n\nNext, I wanted to compare the proportion of bands featuring multiple subgenres across subgenres. To do this, I created a transactions object from the original data, which included all bands, regardless of how many subgenres each had. Then I extracted the support metrics from all bands and the bands with multiple subgenres, and joined these two dataframes into a single dataframe (`comparison_support_df`). I computed a new variable, mixability, as the proportion of each subgenre's observations in which the subgenre was one of two or more:\n\n$$\nMixability_{Subgenre} = P(2+ Subgenres) = \\frac{Count(Subgenre|2+ Subgenres)}{Count(Subgenre)}\n$$\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# create transactions object for all bands regardless of subgenre number\nall_trans_bands <- te_metal_bands_df %>%\n    select(black:thrash) %>%\n    mutate_all(as.logical) %>%\n    transactions()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# create ruleset from transations for support\nall_subs_support <- all_trans_bands %>%\n    apriori(parameter=(list(target='frequent', support=0.001)))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nApriori\n\nParameter specification:\n confidence minval smax arem  aval originalSupport maxtime support minlen\n         NA    0.1    1 none FALSE            TRUE       5   0.001      1\n maxlen            target  ext\n     10 frequent itemsets TRUE\n\nAlgorithmic control:\n filter tree heap memopt load sort verbose\n    0.1 TRUE TRUE  FALSE TRUE    2    TRUE\n\nAbsolute minimum support count: 182 \n\nset item appearances ...[0 item(s)] done [0.00s].\nset transactions ...[16 item(s), 182105 transaction(s)] done [0.01s].\nsorting and recoding items ... [16 item(s)] done [0.00s].\ncreating transaction tree ... done [0.02s].\nchecking subsets of size 1 2 3 done [0.00s].\nsorting transactions ... done [0.02s].\nwriting ... [89 set(s)] done [0.00s].\ncreating S4 object  ... done [0.01s].\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# extract all single subgenre support metrics \nsingle_all_subs_support <- subset(all_subs_support, size(items) == 1)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# sort the single subgenre support metrics\nsingle_all_subs_support_sorted <- sort(single_all_subs_support, \n                                       by='support') %>%\n    head(n=20) %>%\n    inspect()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     items       support count\n[1]  {death}     0.33693 61357\n[2]  {black}     0.28298 51532\n[3]  {thrash}    0.19252 35059\n[4]  {heavy}     0.14786 26926\n[5]  {doom}      0.11062 20144\n[6]  {prog}      0.06577 11977\n[7]  {power}     0.05293  9639\n[8]  {groove}    0.04758  8664\n[9]  {core}      0.04582  8344\n[10] {grindcore} 0.04349  7919\n[11] {symphonic} 0.02603  4741\n[12] {gothic}    0.02271  4135\n[13] {folk}      0.02026  3690\n[14] {speed}     0.01795  3268\n[15] {exp}       0.01154  2101\n[16] {elect}     0.00904  1646\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# convert single multi-subgenre support to dataframe\nsingle_support_df <- as(single_item_support_sorted, 'data.frame')\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# convert all subgenre support to dataframe\nall_single_support_df <- as(single_all_subs_support_sorted, 'data.frame')\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# add multi_ prefix to distinguish columns\nsingle_support_df <- single_support_df %>%\n    rename_with(.cols=support:count, ~ paste0('multi_', .x))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# join tables on items (subgenre)\ncomparison_support_df <- single_support_df %>%\n    left_join(all_single_support_df, join_by(items))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# create mixability variable and sort accordingly\ncomparison_support_df <- comparison_support_df %>%\n    mutate(mixability = multi_count/count) %>%\n    arrange(desc(mixability))\n```\n:::\n\n\n## Mixability Results\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# output comparison support metrics \ncomparison_support_df\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n         items multi_support multi_count support count mixability\n1        {exp}        0.0287        1979 0.01154  2101      0.942\n2      {elect}        0.0216        1492 0.00904  1646      0.906\n3      {speed}        0.0419        2892 0.01795  3268      0.885\n4     {groove}        0.1032        7127 0.04758  8664      0.823\n5       {core}        0.0975        6735 0.04582  8344      0.807\n6  {grindcore}        0.0922        6366 0.04349  7919      0.804\n7  {symphonic}        0.0550        3797 0.02603  4741      0.801\n8       {folk}        0.0397        2745 0.02026  3690      0.744\n9      {power}        0.1019        7035 0.05293  9639      0.730\n10    {gothic}        0.0432        2983 0.02271  4135      0.721\n11      {prog}        0.1123        7759 0.06577 11977      0.648\n12    {thrash}        0.3068       21187 0.19252 35059      0.604\n13     {death}        0.5270       36395 0.33693 61357      0.593\n14      {doom}        0.1478       10205 0.11062 20144      0.507\n15     {heavy}        0.1556       10750 0.14786 26926      0.399\n16     {black}        0.2760       19060 0.28298 51532      0.370\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# create scatter plot comparing number of bands to mixability\nggplot(comparison_support_df, aes(x=count, y=mixability, label=items)) + \n    geom_text(check_overlap=TRUE) +\n    labs(title='Mixability in Relation to Total Subgenre Band Count',\n         x='Number of Bands in Subgenre', \n         y='Mixability (Proportion in Multi-Subgenre)')\n```\n\n::: {.cell-output-display}\n![Metal Subgenres (left to right): Electronic/Industrial, Experimental/Avant-garde, Speed, Folk/Viking/Pagan, Gothic, Symphonic, Grindcore, Metalcore/Deathcore, Groove, Power, Progressive, Doom, Heavy, Thrash, Black, Death.](subgenre_pairings_files/figure-html/unnamed-chunk-27-1.png){width=672}\n:::\n:::\n\n\nA few different findings emerge from the scatter plot above:\n\n-   There appears to be an inverse relationship between number of bands in each subgenre and subgenre mixability\n\n-   Less common subgenres (\\< 10,000 bands) had high mixability (all subgenres besides Progressive were above \\> .70) \n\n-   Black, Heavy, and–to a lesser extent–Doom Metal had low mixability (.37, .40, and .51, respectively)\n\n-   Thrash and Death Metal had relatively high mixability (.60 and .59, respectively), despite being more common subgenres\n\nWhile being appropriately speculative, it is plausible that more common subgenres have a greater capacity to be \"stand-alone\" subgenres. Conversely, subgenres like Experimental/Avant-garde and Electronic/Industrial Metal imply influences outside of Metal, which may reflect a lesser capacity for each to be a \"stand-alone\" Metal subgenre. Thrash and Death Metal had high mixability relative to subgenres of comparable size, such as Heavy or Black Metal. This may suggest Thrash and Death Metal have robust influences, which are simultaneously flexible enough to incorporate other subgenres more regularly than Heavy or Black Metal. Further investigation into the hierarchical structure of Metal subgenres may be useful to characterize mixability, and whether some of these high-mixability subgenres are treated more like add-on influences than subgenres.\n\n## Confidence\n\nConfidence represents the proportion of observations in which a consequent item (B) will also be in the interaction, given an antecedent item (A) in the association. It answers the question, \"What are the chances I will get item B, if I already have A?\":\n\n$$\nConfidence = \\frac{P(B|A)}{P(A)}\n$$\n\nKeeping the same threshold for support (0.015), I added a confidence threshold of 0.25 to the `apriori` object `rules`. The combination of these constraints yielded item associations that occurred at least 1.5% of the time, in which the consequent (second) item was present at least 25% of the time, given the antecedent (first) item in the sequence. Only multi-item associations were examined, as single-item confidence metrics do not add anything on top of support.\n\n\n::: {.cell}\n\n```{.r .cell-code .code-overflow-wrap}\n# extract rules with support > 0.015 and confidence > 0.25\nrules <- apriori(trans_bands, parameter=list(support=0.015, \n                                             confidence=0.25))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nApriori\n\nParameter specification:\n confidence minval smax arem  aval originalSupport maxtime support minlen\n       0.25    0.1    1 none FALSE            TRUE       5   0.015      1\n maxlen target  ext\n     10  rules TRUE\n\nAlgorithmic control:\n filter tree heap memopt load sort verbose\n    0.1 TRUE TRUE  FALSE TRUE    2    TRUE\n\nAbsolute minimum support count: 1036 \n\nset item appearances ...[0 item(s)] done [0.00s].\nset transactions ...[16 item(s), 69067 transaction(s)] done [0.00s].\nsorting and recoding items ... [16 item(s)] done [0.00s].\ncreating transaction tree ... done [0.01s].\nchecking subsets of size 1 2 3 done [0.00s].\nwriting ... [20 rule(s)] done [0.00s].\ncreating S4 object  ... done [0.00s].\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# extract multi-item associations only\nmulti_item_confidence <- subset(rules, size(lhs(rules)) > 0)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# sort the multi-item assocations by confidence \nmulti_item_confidence_sorted <- sort(multi_item_confidence, \n                                     by='confidence')\nmulti_item_confidence_sorted %>%\n    inspect()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     lhs            rhs      support confidence coverage lift  count\n[1]  {grindcore} => {death}  0.0829  0.899      0.0922   1.706 5724 \n[2]  {core}      => {death}  0.0725  0.744      0.0975   1.411 5009 \n[3]  {folk}      => {black}  0.0252  0.635      0.0397   2.301 1743 \n[4]  {black}     => {death}  0.1397  0.506      0.2760   0.961 9650 \n[5]  {speed}     => {thrash} 0.0196  0.469      0.0419   1.530 1357 \n[6]  {power}     => {heavy}  0.0477  0.468      0.1019   3.008 3294 \n[7]  {thrash}    => {death}  0.1414  0.461      0.3068   0.875 9766 \n[8]  {groove}    => {thrash} 0.0443  0.429      0.1032   1.400 3060 \n[9]  {doom}      => {death}  0.0597  0.404      0.1478   0.767 4125 \n[10] {symphonic} => {black}  0.0218  0.397      0.0550   1.438 1507 \n[11] {gothic}    => {doom}   0.0165  0.382      0.0432   2.584 1139 \n[12] {prog}      => {death}  0.0402  0.358      0.1123   0.678 2774 \n[13] {heavy}     => {thrash} 0.0502  0.322      0.1556   1.051 3466 \n[14] {heavy}     => {power}  0.0477  0.306      0.1556   3.008 3294 \n[15] {groove}    => {death}  0.0284  0.275      0.1032   0.522 1959 \n[16] {death}     => {thrash} 0.1414  0.268      0.5270   0.875 9766 \n[17] {death}     => {black}  0.1397  0.265      0.5270   0.961 9650 \n```\n:::\n:::\n\n\nSeventeen multi-subgenre associations exceeded the .25 confidence threshold, with the top four exceeding a threshold of .50. As an example for the top entry, roughly 90% of Grindcore bands with multiple subgenres had Death Metal as a subgenre. Additionally, Death Metal is a common additional subgenre for Metalcore/Deathcore bands (74.4%), Black Metal is a common additional subgenre for Folk/Viking/Pagan Metal bands (63.5%), and Death Metal is a common additional subgenre for Black Metal bands (50.6%).\n\n## Lift\n\nLift goes a step beyond confidence, yielding the probably of consequent (B) given antecedent (A), accounting for the likelihood of these items occurring together if there was no association between them:\n\n$$\nLift = \\frac{p(B|A)}{p(A)*p(B)}\n$$\n\nSince no relationship is assumed between a pair of items, lift values can be interpreted with the following framework:\n\n-   Lift = 0-1: occur less often than expected\n\n-   Lift = 1: occurs as often as expected\n\n-   Lift \\> 1: occurs more often than expected\n\nUsing the same support (0.015) and confidence constraints (0.25) as before, the lift metrics are shown below in descending order.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# support previous rules by lift \nlift_rules <- sort(multi_item_confidence, by='lift')\nlift_rules %>%\n    inspect()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     lhs            rhs      support confidence coverage lift  count\n[1]  {power}     => {heavy}  0.0477  0.468      0.1019   3.008 3294 \n[2]  {heavy}     => {power}  0.0477  0.306      0.1556   3.008 3294 \n[3]  {gothic}    => {doom}   0.0165  0.382      0.0432   2.584 1139 \n[4]  {folk}      => {black}  0.0252  0.635      0.0397   2.301 1743 \n[5]  {grindcore} => {death}  0.0829  0.899      0.0922   1.706 5724 \n[6]  {speed}     => {thrash} 0.0196  0.469      0.0419   1.530 1357 \n[7]  {symphonic} => {black}  0.0218  0.397      0.0550   1.438 1507 \n[8]  {core}      => {death}  0.0725  0.744      0.0975   1.411 5009 \n[9]  {groove}    => {thrash} 0.0443  0.429      0.1032   1.400 3060 \n[10] {heavy}     => {thrash} 0.0502  0.322      0.1556   1.051 3466 \n[11] {black}     => {death}  0.1397  0.506      0.2760   0.961 9650 \n[12] {death}     => {black}  0.1397  0.265      0.5270   0.961 9650 \n[13] {death}     => {thrash} 0.1414  0.268      0.5270   0.875 9766 \n[14] {thrash}    => {death}  0.1414  0.461      0.3068   0.875 9766 \n[15] {doom}      => {death}  0.0597  0.404      0.1478   0.767 4125 \n[16] {prog}      => {death}  0.0402  0.358      0.1123   0.678 2774 \n[17] {groove}    => {death}  0.0284  0.275      0.1032   0.522 1959 \n```\n:::\n:::\n\n\nIgnoring bidirectional rules shown in reverse order, nine subgenre pairings occurred more often than expected, with five occurring more than 1.5 times as frequently as expected. These pairings are shown in the table below. Using the top pairing of Power and Heavy Metal as an example, just under five percent (4.8%) of the multi-subgenre pairings included these two, but this was three times as frequently as expected (3.01).\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# filter to include only lift > 1.5\n# filter confidence to remove duplicate heavy => power\nlifted_sub_pairs <- subset(lift_rules, lift > 1.5 & confidence > .35)\nlifted_sub_pairs %>%\n    inspect()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    lhs            rhs      support confidence coverage lift count\n[1] {power}     => {heavy}  0.0477  0.468      0.1019   3.01 3294 \n[2] {gothic}    => {doom}   0.0165  0.382      0.0432   2.58 1139 \n[3] {folk}      => {black}  0.0252  0.635      0.0397   2.30 1743 \n[4] {grindcore} => {death}  0.0829  0.899      0.0922   1.71 5724 \n[5] {speed}     => {thrash} 0.0196  0.469      0.0419   1.53 1357 \n```\n:::\n:::\n\n\n## Conclusion\n\nReturning to the initial question regarding which metal subgenres frequently co-occur together, the lift table above yields a good picture of subgenres than co-occur more often than would be expected. These subgenre pairings are listed below:\n\n-   Power and Heavy Metal\n\n-   Gothic and Doom Metal\n\n-   Folk/Viking/Pagan and Black Metal\n\n-   Grindcore and Death Metal\n\n-   Speed and Thrash Metal\n\nTo knowledgeable Metalheads like myself, these pairings are unsurprising and sensible from a subgenre hierarchy standpoint. For an excellent visual representation of metal subgenres that contains contextual information on influences and timelines of each, I recommend visiting [mapofmetal.com](https://mapofmetal.com/) [@mapofm]. Two of these subgenre pairings represent an \"offshoot\" of the older subgenre (Power from Heavy Metal and Thrash from Speed Metal), which suggests a clear overlap between each of the pairings. Grindcore and Death Metal evolved on a similar timeline with similar influences, and the existence of intermediate subgenres like Deathgrind suggest a clear link between the two.\n\nThe links between Gothic and Doom and Folk/Viking/Pagan and Black Metal are present as well, and each represents interesting path that potentially diverged from the larger developments in a subgenre. For Gothic and Doom Metal (i.e., Gothic Doom Metal), it may have served as a means for Gothic Metal bands of the late 1990's to diverge from the contemporary usage of symphonic elements in the subgenre [@gothicd]. Instead, Gothic Doom Metal leaned into the more bleak and depressing lyrical and musical influences inherent to both Gothic and Doom Metal. The link between Folk/Viking/Pagan and Black Metal likely stems from the subgenres Viking and Pagan Metal, which were both derived from Black Metal [@hofmann2020c]. These subgenres supplanted the Satanic lyrical themes typical of Black Metal by incorporating Norse mythology and Paganism into lyrics, as well as focuses on nature and broader folklore [@hofmann2020c; @vonhelden2010].\n\n## Next Steps\n\nSince these analyses were intended to provide a general overview of commonly co-occurring Metal subgenres, a couple improvements immediately come to mind for future analyses. Firstly, it would be advantageous to go beyond the basic subgenres provided by Encyclopaedia Metallum to analyze more specific subgenres. This is especially the case for base subgenres like Death or Doom Metal, which have a considerable degree of heterogeneity between subgenres under the base subgenre. Secondly, it would be useful to discern whether a band listed under multiple subgenres evolved from one to another, or simultaneously embodied multiple subgenres. Although these instances were treated as equivalent here, it could be argued that a band taking simultaneous influence from multiple subgenres is a better example of a multi-subgenre band. While Encyclopaedia Metallum provides labels like \"(early)\" or \"(late)\" to distinguish impermanent subgenres for a band, a proper demarcation might require additional information from album reviews or analysis or musical elements.\n\nThe following code block saves the dataframe `te_metal_bands_df` to a .csv file for later usage. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_csv(te_metal_bands_df, 'data/sub_metal_bands.csv')\n```\n:::",
    "supporting": [
      "subgenre_pairings_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}