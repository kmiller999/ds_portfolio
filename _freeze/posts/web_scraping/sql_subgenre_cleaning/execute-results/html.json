{
  "hash": "90847234e886b3aa27779e51cfd45c4b",
  "result": {
    "markdown": "---\ntitle: \"Cleaning Metal Archives Data Using SQL\"\nauthor: \"Kevin B. Miller\"\ndate: July 8, 2024\noutput: html_document\n---\n\n\n## Database Connection\n\nMetal bands often incorporate influences from multiple subgenres, or shift subgenres throughout their career. Accordingly, many bands in the Metal Archives have a `genre` field with multiple subgenres. Rather than forcing each band into a primary subgenre, I wanted each band to be characterized as having a presence or absence of each subgenre. The code in this document accomplished these steps using SQL code by connecting to the `metal_archives_table` from the `metallum_bands.db` via an RSQLite instance.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# import library from R\nlibrary(\"DBI\")\nlibrary(RSQLite)\nlibrary(knitr)\n# set options to print more rows (up to 100)\nopts_chunk$set(echo=TRUE, sql.max.print=100)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# save connection to metallum_bands.db as con\ncon <- dbConnect(RSQLite::SQLite(), \"metallum_bands.db\")\n```\n:::\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT * \nFROM metal_archives_table;\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: Displaying records 1 - 10\n\n|band_name          |country        |genre                         |status   | band_id|\n|:------------------|:--------------|:-----------------------------|:--------|-------:|\n|A // Solution      |United States  |Crust Punk/Thrash Metal       |Split-up |       0|\n|A 12 Gauge Tragedy |United States  |Deathcore                     |Split-up |       1|\n|A Balance of Power |United States  |Melodic Death Metal/Metalcore |Active   |       2|\n|A Band Named Jon   |United States  |Brutal Death Metal/Grindcore  |Active   |       3|\n|A Band of Orcs     |United States  |Death/Thrash Metal            |Active   |       4|\n|A Baptism by Fire  |Canada         |Progressive Power Metal       |Active   |       5|\n|A Bastard's Breath |United States  |Raw Black Metal               |Active   |       6|\n|A Belt Above Black |United States  |Melodic Death Metal/Metalcore |Active   |       7|\n|A Billion Limbs    |United Kingdom |Groove Metal/Deathcore        |Active   |       8|\n|A Binding Spirit   |Germany        |Black Metal/Ambient           |Active   |       9|\n\n</div>\n:::\n\n\n## Steps for Subgenre Structure\n\n### 1. Create TEMP Table for Processing Subgenres\n\nTo start, I created a TEMP table, `processed_genres`, to process the `genre` field in the data.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nCREATE TEMP TABLE processed_genres AS\nSELECT \n    band_id, \n    band_name,\n    country,\n    genre, \n    status\nFROM metal_archives_table;\n```\n:::\n\n\n### 2. Create a New Column for Each Basic Metal Archives Subgenre\n\nOnce `processed_genres` was created, I added an integer column for each base subgenre from the Metal Archives.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nALTER TABLE processed_genres ADD COLUMN black INTEGER DEFAULT 0;\n```\n:::\n\n::: {.cell}\n\n```{.sql .cell-code}\nALTER TABLE processed_genres ADD COLUMN death INTEGER DEFAULT 0;\n```\n:::\n\n::: {.cell}\n\n```{.sql .cell-code}\nALTER TABLE processed_genres ADD COLUMN doom INTEGER DEFAULT 0;\n```\n:::\n\n::: {.cell}\n\n```{.sql .cell-code}\nALTER TABLE processed_genres ADD COLUMN electronic_industrial INTEGER DEFAULT 0;\n```\n:::\n\n::: {.cell}\n\n```{.sql .cell-code}\nALTER TABLE processed_genres ADD COLUMN experimental INTEGER DEFAULT 0;\n```\n:::\n\n::: {.cell}\n\n```{.sql .cell-code}\nALTER TABLE processed_genres ADD COLUMN folk INTEGER DEFAULT 0;\n```\n:::\n\n::: {.cell}\n\n```{.sql .cell-code}\nALTER TABLE processed_genres ADD COLUMN gothic INTEGER DEFAULT 0;\n```\n:::\n\n::: {.cell}\n\n```{.sql .cell-code}\nALTER TABLE processed_genres ADD COLUMN grindcore INTEGER DEFAULT 0;\n```\n:::\n\n::: {.cell}\n\n```{.sql .cell-code}\nALTER TABLE processed_genres ADD COLUMN groove INTEGER DEFAULT 0;\n```\n:::\n\n::: {.cell}\n\n```{.sql .cell-code}\nALTER TABLE processed_genres ADD COLUMN heavy INTEGER DEFAULT 0;\n```\n:::\n\n::: {.cell}\n\n```{.sql .cell-code}\nALTER TABLE processed_genres ADD COLUMN metalcore_deathcore INTEGER DEFAULT 0;\n```\n:::\n\n::: {.cell}\n\n```{.sql .cell-code}\nALTER TABLE processed_genres ADD COLUMN power INTEGER DEFAULT 0;\n```\n:::\n\n::: {.cell}\n\n```{.sql .cell-code}\nALTER TABLE processed_genres ADD COLUMN progressive INTEGER DEFAULT 0;\n```\n:::\n\n::: {.cell}\n\n```{.sql .cell-code}\nALTER TABLE processed_genres ADD COLUMN speed INTEGER DEFAULT 0;\n```\n:::\n\n::: {.cell}\n\n```{.sql .cell-code}\nALTER TABLE processed_genres ADD COLUMN symphonic INTEGER DEFAULT 0;\n```\n:::\n\n::: {.cell}\n\n```{.sql .cell-code}\nALTER TABLE processed_genres ADD COLUMN thrash INTEGER DEFAULT 0;\n```\n:::\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT * \nFROM processed_genres\nLIMIT 10;\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: Displaying records 1 - 10\n\n|band_id |band_name          |country        |genre                         |status   | black| death| doom| electronic_industrial| experimental| folk| gothic| grindcore| groove| heavy| metalcore_deathcore| power| progressive| speed| symphonic| thrash|\n|:-------|:------------------|:--------------|:-----------------------------|:--------|-----:|-----:|----:|---------------------:|------------:|----:|------:|---------:|------:|-----:|-------------------:|-----:|-----------:|-----:|---------:|------:|\n|0       |A // Solution      |United States  |Crust Punk/Thrash Metal       |Split-up |     0|     0|    0|                     0|            0|    0|      0|         0|      0|     0|                   0|     0|           0|     0|         0|      0|\n|1       |A 12 Gauge Tragedy |United States  |Deathcore                     |Split-up |     0|     0|    0|                     0|            0|    0|      0|         0|      0|     0|                   0|     0|           0|     0|         0|      0|\n|2       |A Balance of Power |United States  |Melodic Death Metal/Metalcore |Active   |     0|     0|    0|                     0|            0|    0|      0|         0|      0|     0|                   0|     0|           0|     0|         0|      0|\n|3       |A Band Named Jon   |United States  |Brutal Death Metal/Grindcore  |Active   |     0|     0|    0|                     0|            0|    0|      0|         0|      0|     0|                   0|     0|           0|     0|         0|      0|\n|4       |A Band of Orcs     |United States  |Death/Thrash Metal            |Active   |     0|     0|    0|                     0|            0|    0|      0|         0|      0|     0|                   0|     0|           0|     0|         0|      0|\n|5       |A Baptism by Fire  |Canada         |Progressive Power Metal       |Active   |     0|     0|    0|                     0|            0|    0|      0|         0|      0|     0|                   0|     0|           0|     0|         0|      0|\n|6       |A Bastard's Breath |United States  |Raw Black Metal               |Active   |     0|     0|    0|                     0|            0|    0|      0|         0|      0|     0|                   0|     0|           0|     0|         0|      0|\n|7       |A Belt Above Black |United States  |Melodic Death Metal/Metalcore |Active   |     0|     0|    0|                     0|            0|    0|      0|         0|      0|     0|                   0|     0|           0|     0|         0|      0|\n|8       |A Billion Limbs    |United Kingdom |Groove Metal/Deathcore        |Active   |     0|     0|    0|                     0|            0|    0|      0|         0|      0|     0|                   0|     0|           0|     0|         0|      0|\n|9       |A Binding Spirit   |Germany        |Black Metal/Ambient           |Active   |     0|     0|    0|                     0|            0|    0|      0|         0|      0|     0|                   0|     0|           0|     0|         0|      0|\n\n</div>\n:::\n\n\n### 3. Identify Bands with Appropriate Subgenres\n\nThe code block below parsed the `genre` field in `processed_genres` and added a 1 to the value of a given subgenre when the band's `genre` field included that subgenre. While I attempting to align with the Metal Archives' original classifications, I made a few exceptions when an unclassified subgenre alone could be classified under an existing subgenre, without any additional phrasing or another subgenre. Examples of this are shown below, and reflected by inclusions to the code block below.\n\n-   Southern alone would get put with both Doom/Stoner/Sludge and Groove\n\n-   Goregrind alone would get put with Grindcore\n\n-   Neoclassical alone would get put with Symphonic\n\nConversely, while Post-Metal typically went under Doom/Stoner/Sludge, anything with Post- in that subgenre was accompanied by Doom, Stoner, or Sludge. This suggests that Post-Metal alone was not enough to get grouped under Doom/Stoner/Sludge, and was therefore not classified under that subgenre here (Post-Metal and other unclassified subgenres are shown in section [3.A. Identify Records Not Belonging to a Subgenre]). Since there was a vast amount of data to work with, no further processing was conducted for bands of unclassified subgenres.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nUPDATE processed_genres SET\n    black = CASE WHEN genre LIKE '%Black%' THEN 1 ELSE 0 END,\n    death = CASE WHEN genre LIKE '%Death%' THEN 1 ELSE 0 END,\n    doom = CASE WHEN genre LIKE '%Doom%' \n                OR genre LIKE '%Stoner%' \n                OR genre LIKE '%Sludge%' \n                OR genre LIKE '%Southern%' THEN 1 ELSE 0 END,\n    electronic_industrial = CASE WHEN genre LIKE '%Electronic%' \n                                 OR genre LIKE '%Industrial%' THEN 1 ELSE 0 END,\n    experimental = CASE WHEN genre LIKE '%Experimental%' \n                        OR genre LIKE '%Avant-garde%' THEN 1 ELSE 0 END,\n    folk = CASE WHEN genre LIKE '%Folk%' \n                OR genre LIKE '%Viking%'\n                OR genre LIKE '%Pagan%' THEN 1 ELSE 0 END,\n    gothic = CASE WHEN genre LIKE '%Gothic%' THEN 1 ELSE 0 END,\n    grindcore = CASE WHEN genre LIKE '%Grindcore%' \n                     OR genre LIKE '%Goregrind%' THEN 1 ELSE 0 END,\n    groove = CASE WHEN genre LIKE '%Groove%' \n                  OR genre LIKE '%Southern%' THEN 1 ELSE 0 END,\n    heavy = CASE WHEN genre LIKE '%Heavy%' THEN 1 ELSE 0 END,\n    metalcore_deathcore = CASE WHEN genre LIKE '%Metalcore%' \n                               OR genre LIKE '%Deathcore%' THEN 1 ELSE 0 END,\n    power = CASE WHEN genre LIKE '%Power%' THEN 1 ELSE 0 END,\n    progressive = CASE WHEN genre LIKE '%Progressive%' THEN 1 ELSE 0 END,\n    speed = CASE WHEN genre LIKE '%Speed%' THEN 1 ELSE 0 END,\n    symphonic = CASE WHEN genre LIKE '%Symphonic%' \n                     OR genre LIKE '%Neoclassical%' THEN 1 ELSE 0 END,\n    thrash = CASE WHEN genre LIKE '%Thrash%' THEN 1 ELSE 0 END;\n```\n:::\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT * \nFROM processed_genres\nLIMIT 10;\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: Displaying records 1 - 10\n\n|band_id |band_name          |country        |genre                         |status   | black| death| doom| electronic_industrial| experimental| folk| gothic| grindcore| groove| heavy| metalcore_deathcore| power| progressive| speed| symphonic| thrash|\n|:-------|:------------------|:--------------|:-----------------------------|:--------|-----:|-----:|----:|---------------------:|------------:|----:|------:|---------:|------:|-----:|-------------------:|-----:|-----------:|-----:|---------:|------:|\n|0       |A // Solution      |United States  |Crust Punk/Thrash Metal       |Split-up |     0|     0|    0|                     0|            0|    0|      0|         0|      0|     0|                   0|     0|           0|     0|         0|      1|\n|1       |A 12 Gauge Tragedy |United States  |Deathcore                     |Split-up |     0|     1|    0|                     0|            0|    0|      0|         0|      0|     0|                   1|     0|           0|     0|         0|      0|\n|2       |A Balance of Power |United States  |Melodic Death Metal/Metalcore |Active   |     0|     1|    0|                     0|            0|    0|      0|         0|      0|     0|                   1|     0|           0|     0|         0|      0|\n|3       |A Band Named Jon   |United States  |Brutal Death Metal/Grindcore  |Active   |     0|     1|    0|                     0|            0|    0|      0|         1|      0|     0|                   0|     0|           0|     0|         0|      0|\n|4       |A Band of Orcs     |United States  |Death/Thrash Metal            |Active   |     0|     1|    0|                     0|            0|    0|      0|         0|      0|     0|                   0|     0|           0|     0|         0|      1|\n|5       |A Baptism by Fire  |Canada         |Progressive Power Metal       |Active   |     0|     0|    0|                     0|            0|    0|      0|         0|      0|     0|                   0|     1|           1|     0|         0|      0|\n|6       |A Bastard's Breath |United States  |Raw Black Metal               |Active   |     1|     0|    0|                     0|            0|    0|      0|         0|      0|     0|                   0|     0|           0|     0|         0|      0|\n|7       |A Belt Above Black |United States  |Melodic Death Metal/Metalcore |Active   |     0|     1|    0|                     0|            0|    0|      0|         0|      0|     0|                   1|     0|           0|     0|         0|      0|\n|8       |A Billion Limbs    |United Kingdom |Groove Metal/Deathcore        |Active   |     0|     1|    0|                     0|            0|    0|      0|         0|      1|     0|                   1|     0|           0|     0|         0|      0|\n|9       |A Binding Spirit   |Germany        |Black Metal/Ambient           |Active   |     1|     0|    0|                     0|            0|    0|      0|         0|      0|     0|                   0|     0|           0|     0|         0|      0|\n\n</div>\n:::\n\n\n#### 3.A. Identify Records Not Belonging to a Subgenre\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nALTER TABLE processed_genres ADD COLUMN total_subgenres INTEGER DEFAULT 0;\n```\n:::\n\n::: {.cell}\n\n```{.sql .cell-code}\nUPDATE processed_genres\nSET total_subgenres = \n    black + death + doom + electronic_industrial + experimental + folk +  gothic + \n    grindcore + groove + heavy + metalcore_deathcore + power + progressive + speed + \n    symphonic + thrash;\n```\n:::\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT COUNT(*) AS subgenreless_bands \nFROM processed_genres\nWHERE total_subgenres = 0;\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 1 records\n\n| subgenreless_bands|\n|------------------:|\n|                403|\n\n</div>\n:::\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT \n    genre, \n    COUNT(*) AS number_of_bands\nFROM processed_genres\nGROUP BY genre\nHAVING total_subgenres = 0\nORDER BY number_of_bands DESC\nLIMIT 10;\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: Displaying records 1 - 10\n\n|genre                  | number_of_bands|\n|:----------------------|---------------:|\n|Post-Metal             |             118|\n|Crossover              |              90|\n|Various                |              73|\n|Post-Metal/Rock        |              27|\n|Crossover/Hardcore     |               8|\n|Atmospheric Post-Metal |               7|\n|Grind 'n' Roll         |               6|\n|Dark Ambient           |               6|\n|Post-Metal/Shoegaze    |               3|\n|Various, Shred         |               2|\n\n</div>\n:::\n\n\n### 4. Save Table\n\nThe code blocks below save the TEMP table `processed_genres` as `dc_processed_genres`, with the dc\\_ prefix denoting the dummy coding-like structure of the subgenre columns. Dropping any pre-existing tables of this name ensures the new table is created, even if a table with the same name exists.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nDROP TABLE IF EXISTS dc_processed_genres;\n```\n:::\n\n::: {.cell}\n\n```{.sql .cell-code}\nCREATE TABLE dc_processed_genres AS \nSELECT * \nFROM processed_genres;\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndbDisconnect(con)\n```\n:::",
    "supporting": [
      "sql_subgenre_cleaning_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}